# Portable Stack Manipulator

This crate provides very portable functions to control the stack pointer and inspect the properties
of the stack. This crate does not attempt to provide safe abstractions to any operations, the
only goals are correctness, portability and efficiency (in that exact order). As a consequence most
functions youâ€™ll see in this crate are unsafe.

Unless youâ€™re writing a safe abstraction over stack manipulation, this is not the crate you
want. Instead consider one of the safe abstractions over this crate. A good place to look at is
the crates.ioâ€™s reverse dependency list.

# Platform support

<table>
<tr>
    <th rowspan="3">Target</th>
    <th colspan="3">Support</th>
</tr>
<tr>
    <th>General</th>
    <th>Callstack</th>
    <th>Verified</th>
</tr>
<tr>
    <th colspan="3">Notes</th>
</tr>

<tr>
    <td rowspan="2">x86_64-*</td>
    <td>ğŸ—¹, Yes</td>
    <td>?, Unknown</td>
    <td>ğŸ—¹, CI</td>
</tr>
<tr>
    <td colspan="3">
    x86_64-apple-ios has been tested locally.
    Assembly code for *-msvc targets is not yet available.
    </td>
</tr>

<tr>
    <td rowspan = "2">i686-*<br>i386-*</td>
    <td>ğŸ—¹, Yes</td>
    <td>?, Unknown</td>
    <td>ğŸ—¹, CI</td>
</tr>
<tr>
    <td colspan="3">
    i386-apple-ios is untested.
    i686-linux-android is untested.
    Assembly code for *-msvc targets is not yet available.
    </td>
</tr>

<tr>
    <td rowspan="2">aarch64-*</td>
    <td>ğŸ—¹, Yes</td>
    <td>?, Unknown</td>
    <td>ğŸ—¹, CI</td>
</tr>
<tr>
    <td colspan="3">
    Only targets using the standard AAPCS calling convention are supported currently.
    aarch64-apple-ios has not been tested.
    </td>
</tr>

<tr>
    <td rowspan="2">arm-*<br>armv7-*</td>
    <td>ğŸ—¹, Yes</td>
    <td>?, Unknown</td>
    <td>ğŸ—¹, CI</td>
</tr>
<tr>
    <td colspan="3">
    Only targets using the standard AAPCS calling convention are supported currently.
    </td>
</tr>

<tr>
    <td rowspan="2">armv5te-*</td>
    <td>?, Unknown</td>
    <td>?, Unknown</td>
    <td>?, Unknown</td>
</tr>
<tr>
    <td colspan="3"></td>
</tr>

<tr>
    <td rowspan="2">thumbv6*-*<br>thumbv7*-*</td>
    <td>ğŸ—¹, Yes</td>
    <td>?, Unknown</td>
    <td>ğŸ—µ</td>
</tr>
<tr>
    <td colspan="3">
    Only targets using the standard AAPCS calling convention are supported currently.
    </td>
</tr>

<tr>
    <td rowspan="2">mips-*</td>
    <td>ğŸ—µ, No</td>
    <td>ğŸ—µ, No</td>
    <td>ğŸ—µ, No</td>
</tr>
<tr>
    <td colspan="3">Havenâ€™t gotten to it yetâ€¦</td>
</tr>

<tr>
    <td rowspan="2">powerpc-unknown-linux-gnu</td>
    <td>ğŸ—¹, Yes</td>
    <td>ğŸ—¹, Yes</td>
    <td>ğŸ—¹, CI</td>
</tr>
<tr>
    <td colspan="3">
    Callstack generation may fail at certain well defined ranges of the program, although the usual
    compiler-generated code fails at similar points.
    </td>
</tr>

<tr>
    <td rowspan="2">powerpc64-unknown-linux-gnu</td>
    <td>ğŸ—¹, Yes</td>
    <td>ğŸ—¹, Yes</td>
    <td>ğŸ—¹, CI</td>
</tr>
<tr>
    <td colspan="3">
    Callstack generation may fail at certain well defined ranges of the program, although the usual
    compiler-generated code fails at similar points.
    </td>
</tr>

<tr>
    <td rowspan="2">powerpc64le-unknown-linux-gnu</td>
    <td>ğŸ—¹, Yes</td>
    <td>ğŸ—¹, Yes</td>
    <td>ğŸ—¹, CI</td>
</tr>
<tr>
    <td colspan="3">
    Callstack generation may fail at certain well defined ranges of the program, although the usual
    compiler-generated code fails at similar points.
    </td>
</tr>

<tr>
    <td rowspan="2">s390x-unknown-linux-gnu</td>
    <td>ğŸ—¹, Yes</td>
    <td>?, Unknown</td>
    <td>ğŸ—¹, Locally</td>
</tr>
<tr>
    <td colspan="3">Test runner on CI hangs...</td>
</tr>

<tr>
    <td rowspan="2">sparc-unknown-linux-gnu</td>
    <td>ğŸ—µ, No</td>
    <td>ğŸ—µ, No</td>
    <td>ğŸ—µ, No</td>
</tr>
<tr>
    <td colspan="3">Machine to ssh into wanted (setting up a VM failedâ€¦)</td>
</tr>

<tr>
    <td rowspan="2">sparc64-*</td>
    <td>ğŸ—µ, No</td>
    <td>ğŸ—µ, No</td>
    <td>ğŸ—µ, No</td>
</tr>
<tr>
    <td colspan="3">Machine to ssh into wanted (setting up a VM failedâ€¦)</td>
</tr>

<tr>
    <td rowspan="2">sparcv9-sun-solaris</td>
    <td>ğŸ—µ, No</td>
    <td>ğŸ—µ, No</td>
    <td>ğŸ—µ, No</td>
</tr>
<tr>
    <td colspan="3">
    Machine to ssh into wanted (setting up a VM failedâ€¦)
    Where does one even get a solaris?
    </td>
</tr>

<tr>
    <td rowspan="2">wasm-*</td>
    <td>ğŸ—µ, No</td>
    <td>ğŸ—µ, No</td>
    <td>ğŸ—µ, No</td>
</tr>
<tr>
    <td colspan="3">
    This library is not applicable to the target. WASM hasnâ€™t a specified C ABI, the callstack is
    not even in an address space and does not appear to be manipulatable.
    </td>
</tr>

<tr>
    <td rowspan="2">asmjs-*</td>
    <td>ğŸ—µ, No</td>
    <td>ğŸ—µ, No</td>
    <td>ğŸ—µ, No</td>
</tr>
<tr>
    <td colspan="3">
    Feasibility/necessity hasnâ€™t been acertained.
    </td>
</tr>

<tr>
    <td rowspan="2">nvptx-*</td>
    <td>ğŸ—µ, No</td>
    <td>ğŸ—µ, No</td>
    <td>ğŸ—µ, No</td>
</tr>
<tr>
    <td colspan="3">
    Feasibility/necessity hasnâ€™t been acertained.
    </td>
</tr>

<tr>
    <td rowspan="2">msp430-*</td>
    <td>ğŸ—µ, No</td>
    <td>ğŸ—µ, No</td>
    <td>ğŸ—µ, No</td>
</tr>
<tr>
    <td colspan="3">
    Havenâ€™t gotten to it yet...
    </td>
</tr>

<tr>
    <td rowspan="2">riscv-*</td>
    <td>ğŸ—µ, No</td>
    <td>ğŸ—µ, No</td>
    <td>ğŸ—µ, No</td>
</tr>
<tr>
    <td colspan="3">
    Havenâ€™t gotten to it yet...
    </td>
</tr>
</table>
